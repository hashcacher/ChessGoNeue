// Code generated by MockGen. DO NOT EDIT.
// Source: ./core/matchRequest.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	core "github.com/hashcacher/ChessGoNeue/Server/v2/core"
	reflect "reflect"
)

// MockMatchRequests is a mock of MatchRequests interface
type MockMatchRequests struct {
	ctrl     *gomock.Controller
	recorder *MockMatchRequestsMockRecorder
}

// MockMatchRequestsMockRecorder is the mock recorder for MockMatchRequests
type MockMatchRequestsMockRecorder struct {
	mock *MockMatchRequests
}

// NewMockMatchRequests creates a new mock instance
func NewMockMatchRequests(ctrl *gomock.Controller) *MockMatchRequests {
	mock := &MockMatchRequests{ctrl: ctrl}
	mock.recorder = &MockMatchRequestsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMatchRequests) EXPECT() *MockMatchRequestsMockRecorder {
	return m.recorder
}

// Store mocks base method
func (m *MockMatchRequests) Store(arg0 core.MatchRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store
func (mr *MockMatchRequestsMockRecorder) Store(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockMatchRequests)(nil).Store), arg0)
}

// FindMatchRequestByUserID mocks base method
func (m *MockMatchRequests) FindMatchRequestByUserID(userID int) (core.MatchRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMatchRequestByUserID", userID)
	ret0, _ := ret[0].(core.MatchRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMatchRequestByUserID indicates an expected call of FindMatchRequestByUserID
func (mr *MockMatchRequestsMockRecorder) FindMatchRequestByUserID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMatchRequestByUserID", reflect.TypeOf((*MockMatchRequests)(nil).FindMatchRequestByUserID), userID)
}

// Delete mocks base method
func (m *MockMatchRequests) Delete(id int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockMatchRequestsMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMatchRequests)(nil).Delete), id)
}
